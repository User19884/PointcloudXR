/*
	Author: Mikael Hertz (mikael.hertz@gmail.com)
*/
#pragma kernel Generator
#pragma enable_d3d11_debug_symbols
#define NUM_THREADS 1024
#include "Assets/PointCloudManager/Shader/include/PointCloudXR_include.cginc"

RWStructuredBuffer<PointXR> _Points : register(u6);

uint  _number_of_points;
float _spacing;
float _UserCameraY;

[numthreads(NUM_THREADS, 1, 1)]
void Generator(uint3 id : SV_DispatchThreadID, uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
	uint size_side = pow(_number_of_points, 1 / 3.0);

	float _OffsetZ = (size_side * _spacing) / 2;
	float _OffsetX = (size_side * _spacing) / 2;
	float _OffsetY = (size_side * _spacing) / 4;

	uint col = id.x % size_side;
	uint plane = id.x / (size_side * size_side);
	uint row = id.x / size_side - plane * size_side;

	float3 pos = float3(col * _spacing - _OffsetX, plane * _spacing - _OffsetY, row * _spacing - _OffsetZ);

	float c = ((float)id.x / (float)_number_of_points);

	PointXR pt;
	pt.pos = pos;

	pt.color = float4(0, c, c, 1.0f);
	pt.deleted = 0;
	pt.selected = 0;
	pt.intensityNormalized = 1.0;
	pt.classification = 1.0;
	pt.id = id.x;
	pt.user_color = float4(0, 1.0f, 0, 1.0f);
	pt.scan_angle_rank = 0;
	pt.user_data = 0;
	pt.point_source_id = 0;
	pt.gps_time = 0;
	pt.visible = 1;
	pt.padding01 = 0;
	pt.padding02 = 0;
	pt.padding03 = 0;

	if (id.x < _number_of_points)
	{
		_Points[id.x] = pt;
	}
}
